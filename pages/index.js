import Head from "next/head";
import Header from "../components/Header";
import { useEffect } from "react";
import { useState } from "react";
import { occurs } from "../functions/count";
import { same } from "../functions/same";
import wait from "../functions/wait";
import Bottom from "../components/Bottom";
import GeneralContextProvider, { useCtx } from "../context/GeneralContext";
import CrownIcon from "../icons/StarIcon";

export default function Main() {
  const {
    score,
    setScore,
    isFinished,
    setIsFinished,
    count,
    setCount,
    pos,
    setPos,
    text,
    setTime,
    time,
    input,
    setInput,
    start,
    setStart,
    high,
  } = useCtx();

  const words = text;

  const [isFocussed, setIsFocussed] = useState(true);
  const [isTyping, setIsTyping] = useState(false);

  const [wrong, setWrong] = useState(false);

  const [capsOn, setCapsOn] = useState(false);

  // ~ Initially focus the input
  useEffect(() => {
    document.getElementById("Hinput").focus();
  }, []);

  // ~ Initial position of the caret
  useEffect(() => {
    const initial = document.getElementsByClassName("letter")[0];
    setPos([initial.offsetTop, initial.offsetLeft]);
  }, []);

  // ~ Space Controlled input
  useEffect(() => {
    if (count < words.length) {
      if (input !== "") {
        if (input.trim().length === 0) {
          setInput("");
          return;
        }
      }
      // ~ On space update the score
      if (input.split(" ").length > 1) {
        const compare = same(words[count], input.trim());

        // ~ seperate the incorrect and the extra words - as the extras are also marked as incorrect by the compare function
        const compareIncorrect = compare.slice(0, words[count].length);

        // ~ use the difference the find the number of extra words
        const difference = input.length - (words[count].length + 1);

        // ~ Update score
        setScore({
          correct: score?.correct + occurs(compare, true),
          incorrect: score?.incorrect + occurs(compareIncorrect, false),
          missed: score?.missed + occurs(compare, undefined),
          extra: score?.extra + (difference > 0 ? difference : 0),
        });

        // ~ Clear the input and increment the count
        setInput("");
        setCount(count + 1);
        setWrong(false);
      } else {
        // ~ Get comparison array of the current word and the input
        const compare = same(words[count], input);
        const currentWord = document.getElementsByClassName("word")[count];
        const currentLetter =
          currentWord.getElementsByClassName("letter")[input.length];

        // ~ Update wrong state for UI update
        occurs(compare, false) > 0 ? setWrong(true) : setWrong(false);

        // ~ Account for extra letters (Do nothing)
        if (input.length > words[count].length) {
          return;
        }

        // ~ Change the position of the caret
        setPos([currentLetter.offsetTop, currentLetter.offsetLeft]);

        // ~ Change the colour of the text accordinly
        compare.map((val, idx) => {
          if (val === undefined)
            currentWord.getElementsByClassName("letter")[idx].style.color =
              "white";
          if (val === false)
            currentWord.getElementsByClassName("letter")[idx].style.color =
              "#ff1b39b7";
          if (val === true)
            currentWord.getElementsByClassName("letter")[idx].style.color =
              "#1a3763";
        });
      }
    }
    if (count === words.length - 1) {
      setIsFinished(true);
      setStart(false);
      setTime({ ...time, end: Date.now() / 1000 });
    }
    // console.log(score);
  }, [input]);

  return (
    <>
      <div className="flex flex-col items-center justify-center h-screen bg-secondary-200">
        <Head>
          <title>typo</title>
          <meta name="description" content="Generated by create next app" />
        </Head>
        <Header />
        <div
          id="txt"
          className="mt-10 p-8 relative max-w-3xl font-mono font-extralight text-white text-[26px] z-30"
          onClick={() => {
            document.getElementById("Hinput").focus();
          }}
        >
          <div className="flex flex-row items-center ">
            <div className="text-secondary-100 select-none">
              {count}/{text.length - 1}
            </div>
            <div className="relative w-min h-min group ml-5 text-secondary-100 transition-all hover:text-primary">
              <CrownIcon />
              <div className="-translate-x-1/2 -translate-y-1/2 -top-6 left-1/2 absolute bg-secondary-100 w-max px-2 py-1 text-secondary-200 transition-all rounded-lg text-[18px] duration-200 scale-0 group-hover:scale-100 select-none font-sans">
                Personal Best - {high}wpm
              </div>
            </div>
          </div>
          {/* Caret */}
          <div
            className={`absolute w-[3.5px] h-[30px] bg-primary rounded-md select-no ne transition-all duration-[0.1s]
            ${
              // ~ Display or hide depending on the focus
              isFocussed
                ? `opacity-100  ${!isTyping && "animate-pulse"}`
                : "opacity-0"
            }`}
            style={{ position: "absolute", top: pos[0] + 1.5, left: pos[1] }}
          ></div>

          {/* Map words and output them in word/letter format */}
          {words.map((word, idx) => {
            return (
              // ~ Word
              <label key={idx} className="word">
                {word.split("").map((letter, idx) => {
                  // ~  Letter
                  return (
                    <label key={idx} className="letter">
                      {letter}
                    </label>
                  );
                })}
                {/*~ Space after each word */}
                <label className="letter"> </label>
              </label>
            );
          })}
        </div>

        {/* Underline */}
        <Bottom wrong={wrong} input={input} caps={capsOn} />

        {/* Hidden input for keyboard input */}
        <input
          tabIndex="1"
          id="Hinput"
          value={input}
          onChange={(e) => {
            setInput(e.target.value);
            if (start) return;
            if (!start) {
              setTime({ ...time, start: Date.now() / 1000 });
              setStart(true);
            }
          }}
          // ~ Disable is isFinished is true
          // disabled={isFinished}
          // ~ On focus update due to hidden input
          onFocus={() => {
            setIsFocussed(true);
          }}
          onBlur={() => {
            setIsFocussed(false);
          }}
          // ~ To stop the pulse animation when typing
          onKeyDown={() => {
            setIsTyping(true);
          }}
          onKeyUp={async (e) => {
            setCapsOn(e.getModifierState("CapsLock"));
            await wait(500);
            setIsTyping(false);
          }}
          maxLength={isFinished ? "0" : "18"}
          className="font-mono text-black px-2 scale-0"
          type="text"
        />
      </div>
    </>
  );
}
